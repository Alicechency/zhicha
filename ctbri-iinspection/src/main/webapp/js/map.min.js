/**
 * 此文件用于声明保存后端数据的相关变量以及数据转换
 */


/**
 * ES数据转换，全部保存全局数据
 * 存储数据的变量声明(按excel顺序)
 * 各字段全部转换成key-value(key为id)
 */

// 序号(_source.serial_no)没用


// 警情序号，唯一ID(_source.id)


// 报警时间(_source.submiteDatetime)
var caseTime = {};

// 报警电话(_source.victim_tel)
var victimTel = {};

// 接警人员(_source.officer_name)
var officerName = {};

// 坐席号(_source.officer_seats_no)
var officerSeatsNo = {};

// 警情标题(_source.title)
var caseTitle = {};

// 处警单位分局(没有对应)


// 处警单位派出所(_source.local_substation)
var localSubstation = {};

// 工作情况(_source.case_situation)
var caseSituation = {};

// 警情类别(_source.case_type数组)
var caseType = {};

// 街头类别(_source.block_type)
var blockType = {};

// 案情摘要(_source.case_abstract)
var caseAbstract = {};

// 反馈信息(_source.contents)
var feedback = {};

// 类别(_source.subtagname)
var subcaseType = {};

// 作案手段(_source.modus_operandi)
var modusOperandi = {};

// 点位(_source.PT)
var casePT = {};

// 经纬度(_source.location_point.lon, _source.location_point.lat)
var locationPoint = {};

// 直属地区派出所、中心警务站(_source.central_station), 大部分没有这个信息
var centralStation = {};

// 新疆人(_source.isxj)
var isxj = {};

// 车型(_source.vehicle_type)
var vehicleType = {};

// 事主身份(_source.identity)
var identity = {};

// 诈骗警情事主年龄(_source.age)
var age = {};


// 存储案情类别的集合
var typeArr = [];


// 存储以毫秒计算的时间(Date.parse)，用于比较
var caseTimeWithMs = {};

// 起始时间
var startTime = '';
// 终止时间
var endTime = '';
// 关键词
var keyword = '';

// 初始时间设置为近一个月
(function() {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth() + 1;
    var day = now.getDate();
    var hour = now.getHours();
    endTime = year + '-' + month + '-' + day + ' ' + hour + ':00';
    var before = new Date(now - 86400000 * 30);
    year = before.getFullYear();
    month = before.getMonth() + 1;
    day = before.getDate();
    startTime = year + '-' + month + '-' + day + ' 00:00';
}());


// 请求ES数据
var ESData = {};


/**
 * [两次Ajax请求获取ES数据]
 * @param  {String} startTime [开始时间]
 * @param  {String} endTime   [结束时间]
 * @param  {String} keyword   [关键词]
 * @return {null}             [修改了全局变量ESData和totalLength]
 */
function getESData(startTime, endTime, keyword) {
    var totalLength = 0;
    startTime = startTime + ":00";
    endTime = endTime + ":00";
    if (keyword === '') {
        $.ajax({
            type: "POST",
            url: "http://localhost:9200/cypo/_search",
            data: JSON.stringify({
                "query": {
                    "range": {
                        "submiteDatetime": {
                            "gte": startTime,
                            "lte": endTime
                        }
                    }
                }
            }),
            dataType: "json",
            contentType: 'application/json',
            async: false,
            success: function(res) {
                totalLength = res.hits.total;
            }
        });

        $.ajax({
            type: "POST",
            url: "http://localhost:9200/cypo/_search?size=" + totalLength,
            data: JSON.stringify({
                "query": {
                    "range": {
                        "submiteDatetime": {
                            "gte": startTime,
                            "lte": endTime
                        }
                    }
                }
            }),
            dataType: "json",
            contentType: 'application/json',
            async: false,
            success: function(res) {
                ESData = res.hits.hits;
            }
        });
    } else {
        $.ajax({
            type: "POST",
            url: "http://localhost:9200/cypo/_search",
            data: JSON.stringify({
                "query": {
                    "bool": {
                        "must": {
                            "multi_match": {
                                "query": keyword,
                                "fields": ["contents", "title", "case_abstract ", "tagname", "modus_operandi", "subtagname"]
                            }
                        },
                        "filter": {
                            "range": {
                                "submiteDatetime": {
                                    "gte": startTime,
                                    "lte": endTime
                                }
                            }
                        }
                    }
                }
            }),
            dataType: "json",
            contentType: 'application/json',
            async: false,
            success: function(res) {
                totalLength = res.hits.total;
            }
        });

        $.ajax({
            type: "POST",
            url: "http://localhost:9200/cypo/_search?size=" + totalLength,
            data: JSON.stringify({
                "query": {
                    "bool": {
                        "must": {
                            "multi_match": {
                                "query": keyword,
                                "fields": ["contents", "title", "case_abstract ", "tagname", "modus_operandi", "subtagname"]
                            }
                        },
                        "filter": {
                            "range": {
                                "submiteDatetime": {
                                    "gte": startTime,
                                    "lte": endTime
                                }
                            }
                        }
                    }
                }
            }),
            dataType: "json",
            contentType: 'application/json',
            async: false,
            success: function(res) {
                ESData = res.hits.hits;
            }
        });
    }
}


/**
 * [将ESData转换成eventData]
 * @param  {对象} ESData [description]
 * @return {对象数组}     [返回eventData]
 */
function cvtESData2eventData() {
    // 初始化全部全局变量
    // 序号(_source.serial_no)没用


    // 警情序号，唯一ID(_source.id)


    // 报警时间(_source.submiteDatetime)
    caseTime = {};

    // 报警电话(_source.victim_tel)
    victimTel = {};

    // 接警人员(_source.officer_name)
    officerName = {};

    // 坐席号(_source.officer_seats_no)
    officerSeatsNo = {};

    // 警情标题(_source.title)
    caseTitle = {};

    // 处警单位分局(没有对应)


    // 处警单位派出所(_source.local_substation)
    localSubstation = {};

    // 工作情况(_source.case_situation)
    caseSituation = {};

    // 警情类别(_source.case_type数组)
    caseType = {};

    // 街头类别(_source.block_type)
    blockType = {};

    // 案情摘要(_source.case_abstract)
    caseAbstract = {};

    // 反馈信息(_source.contents)
    feedback = {};

    // 类别(_source.subtagname)
    subcaseType = {};

    // 作案手段(_source.modus_operandi)
    modusOperandi = {};

    // 点位(_source.PT)
    casePT = {};

    // 经纬度(_source.location_point.lon, _source.location_point.lat)
    locationPoint = {};

    // 直属地区派出所、中心警务站(_source.central_station), 大部分没有这个信息
    centralStation = {};

    // 新疆人(_source.isxj)
    isxj = {};

    // 车型(_source.vehicle_type)
    vehicleType = {};

    // 事主身份(_source.identity)
    identity = {};

    // 诈骗警情事主年龄(_source.age)
    age = {};


    // 存储案情类别的集合
    typeArr = [];


    // 存储以毫秒计算的时间(Date.parse)，用于比较
    caseTimeWithMs = {};


    for (var i = 0; i < ESData.length; i++) {
        // 拆分各类属性
        var caseId = ESData[i]._source.id;
        if (ESData[i]._source.submiteDatetime !== undefined) {
            caseTime[caseId] = ESData[i]._source.submiteDatetime;
        } else {
            caseTime[caseId] = undefined;
        }
        if (ESData[i]._source.victim_tel !== undefined) {
            victimTel[caseId] = ESData[i]._source.victim_tel;
        } else {
            victimTel[caseId] = undefined;
        }
        if (ESData[i]._source.officer_name !== undefined) {
            officerName[caseId] = ESData[i]._source.officer_name;
        } else {
            officerName[caseId] = undefined;
        }
        if (ESData[i]._source.officer_seats_no !== undefined) {
            officerSeatsNo[caseId] = ESData[i]._source.officer_seats_no;
        } else {
            officerSeatsNo[caseId] = undefined;
        }
        if (ESData[i]._source.title !== undefined) {
            caseTitle[caseId] = ESData[i]._source.title;
        } else {
            caseTitle[caseId] = undefined;
        }
        if (ESData[i]._source.local_substation !== undefined) {
            localSubstation[caseId] = ESData[i]._source.local_substation;

        } else {
            localSubstation[caseId] = undefined;
        }
        if (ESData[i]._source.case_situation !== undefined) {
            caseSituation[caseId] = ESData[i]._source.case_situation;
        }
        if (ESData[i]._source.case_type !== undefined) {
            caseType[caseId] = ESData[i]._source.case_type;
        } else {
            caseType[caseId] = undefined;
        }
        if (ESData[i]._source.block_type !== undefined) {
            blockType[caseId] = ESData[i]._source.block_type;
        }
        if (ESData[i]._source['case_abstract '] !== undefined) {
            caseAbstract[caseId] = ESData[i]._source['case_abstract '];
        } else {
            caseAbstract[caseId] = undefined;
        }
        if (ESData[i]._source.contents !== undefined) {
            feedback[caseId] = ESData[i]._source.contents;
        } else {
            feedback[caseId] = undefined;
        }
        if (ESData[i]._source.subtagname !== undefined) {
            subcaseType[caseId] = ESData[i]._source.subtagname;
        } else {
            subcaseType[caseId] = undefined;
        }
        if (ESData[i]._source.modus_operandi !== undefined) {
            modusOperandi[caseId] = ESData[i]._source.modus_operandi;
        }
        if (ESData[i]._source.PT !== undefined) {
            casePT[caseId] = ESData[i]._source.PT;
        }
        if (ESData[i]._source.location_point !== undefined) {
            locationPoint[caseId] = ESData[i]._source.location_point;
        } else {
            locationPoint[caseId] = undefined;
        }
        if (ESData[i]._source.central_station !== undefined) {
            centralStation[caseId] = ESData[i]._source.central_station;
        }
        if (ESData[i]._source.isxj !== undefined) {
            isxj[caseId] = ESData[i]._source.isxj;
        }
        if (ESData[i]._source.vehicle_type !== undefined) {
            vehicleType[caseId] = ESData[i]._source.vehicle_type;
        }
        if (ESData[i]._source.identity !== undefined) {
            identity[caseId] = ESData[i]._source.identity;
        } else {
            identity[caseId] = undefined;
        }
        if (ESData[i]._source.age !== undefined) {
            age[caseId] = ESData[i]._source.age;
        }
        // 计算类别类别集合
        if (typeArr.indexOf(ESData[i]._source.subtagname) === -1) {
            typeArr.push(ESData[i]._source.subtagname);
        }
        // 计算Date.parse后的时间对象
        caseTimeWithMs[caseId] = Date.parse(ESData[i]._source.submiteDatetime);
    }

    return createEventDataWithTime(typeArr, startTime, endTime);
}


/**
 * [组合出按类别加载的散点数据，同时加入了时间过滤]
 * @param  {String} startTime [yyyy-MM-dd hh:00]
 * @param  {String} endTime   [yyyy-MM-dd hh:00]
 * @return {对象} [eventData,key: 案情类别, value: 事件列表;事件列表中的对象为: {name: caseTitle, value: [经度, 纬度, caseId]}]
 */
function createEventDataWithTime(typeArr, startTime, endTime) {
    var eventData = {};

    // 初始化数据结构
    for (i = 0; i < typeArr.length; i++) {
        eventData[typeArr[i]] = [];
    }

    startTime = Date.parse(startTime);
    endTime = Date.parse(endTime);

    // 事件按类别添加
    for (i = 0; i < ESData.length; i++) {
        var caseId = ESData[i]._source.id;
        if (Date.parse(caseTime[caseId]) >= startTime &&
            Date.parse(caseTime[caseId]) <= endTime &&
            caseTitle[caseId] !== undefined &&
            locationPoint[caseId] !== undefined &&
            locationPoint[caseId].lon !== undefined &&
            locationPoint[caseId].lat !== undefined) {
            var temp = {};
            temp.name = caseTitle[caseId];
            temp.value = [locationPoint[caseId].lon, locationPoint[caseId].lat, caseId];
            eventData[subcaseType[caseId]].push(temp);
        }
    }

    return eventData;
}


// 全局的案情数据对象
var eventData = {};
// 语音助手关键词的判断
var assistantWord = $('#word').val();
if (assistantWord !== '${word}' && assistantWord !== '') {
    keyword = assistantWord;
}
getESData(startTime, endTime, keyword);
eventData = cvtESData2eventData(ESData);


// 警车位置散点图 - 声明警车位置数据变量
var policeCarData = [];


// 维护一个全局关系图relationData
var relationData = {};


/**
 * 本文件包含数据处理相关函数
 */


/**
 * [转换后端传递的警车位置Json数据]
 * @param  {对象数组} data [每个数组元素由id,longitude,latitude组成]
 * @return {对象数组}      [用于在地图上显示警车位置]
 */
function convertPoliceCarJsonData(data) {
    var res = [];
    for (var i = 0; i < data.length; i++) {
        var geoCoord = [data[i]['longitude'], data[i]['latitude']];
        if (geoCoord) {
            res.push({
                name: data[i]['id'],
                value: geoCoord
            });
        }
    }
    return res;
}


/**
 * [将案情数据转换成按类别的series散点数据]
 * @param  {对象数组} data   [事件数据eventData]
 * @param  {对象数组} series [echarts.option中的mySeries]
 */
function convertEventData2Series(data, series) {
    var srs = {};
    var i = 0;
    for (var each in data) {
        srs = {
            // id用于清除案情按钮
            id: 'eventDataCategory' + i,
            type: 'scatter',
            // name用于legend
            name: each,
            coordinateSystem: 'bmap',
            // data是案情散点数据
            data: data[each],
            // 散点图案大小随时间的变化函数
            symbolSize: 13,
            label: {
                normal: {
                    show: false
                },
                // hover时显示的文字
                emphasis: {
                    show: true,
                    position: 'right',
                    formatter: function(params) {
                        return caseAbstract[params.value[2]];
                    },
                    textStyle: {
                        fontSize: 14
                    }
                }
            },
            itemStyle: {
                normal: {
                    // 改变散点颜色,默认自适应
                    color: function(params) {
                        var colorList = ['#50a3ba', '#eac736', '#d94e5d'];
                        return colorList[params.seriesIndex % colorList.length];
                    }
                }
            },
            // tips文字信息(使用自己重构的)
            tooltip: {
                show: false,
                position: function(pos, params, dom, rect, size) {
                    // 鼠标在左侧时 tooltip 显示到右侧，鼠标在右侧时 tooltip 显示到左侧。
                    // var obj = { top: pos[1] };
                    // obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;
                    // return obj;
                },

                formatter: function(params) {
                    return params.name + ': ' + caseAbstract[params.value[2]];
                }
            }
        };
        series.push(srs);
        i++;
    }
}


/**
 * [转换热力图频度数据]
 * @param  {对象数组} data [eventData[类别]，即对应类别的事件列表]
 * @return {二维数组}      [行对应不同的数据项,列分别为经度、维度、频度]
 */
function convertFreqData(data) {
    var res = [];
    for (var i = 0; i < data.length; i++) {
        res.push([data[i].value[0], data[i].value[1], 10]);
    }
    return res;
}


// 巡逻路线数据处理
var hStep = 300 / (lineData.length - 1);
var linesData = [].concat.apply([], lineData.map(function(line, idx) {
    var prevPt;
    var points = [];
    for (var i = 0; i < line.length; i += 2) {
        var pt = [line[i], line[i + 1]];
        points.push([pt[0] / 1e4, pt[1] / 1e4]);
    }
    return {
        coords: points,
        lineStyle: {
            normal: {
                color: echarts.color.modifyHSL('#5A94DF', Math.round(hStep * idx))
            }
        }
    };
}));


/**
 * [创建关系图的nodes数据]
 * @param  {JSON对象} relationData [请求返回的relationData(过滤掉前几级key)]
 * @return {对象数组}               [关系图配置项中的nodes(或data)]
 */
function createRelationGraphNodes(relationData) {
    var nodes = [];
    // 创建案件ID结点(中心结点)
    nodes.push({
        name: '案件' + relationData.id,
        symbolSize: 40,
        itemStyle: {
            normal: {
                color: '#c23531'
            }
        }
    });
    // 创建事主身份结点
    nodes.push({
        name: '事主身份',
        category: '事主身份',
        symbolSize: 30
    });
    // 创建附近案件结点
    nodes.push({
        name: '附近案件',
        category: '附近案件',
        symbolSize: 30
    });
    // 创建嫌疑人结点
    nodes.push({
        name: '嫌疑人',
        category: '嫌疑人',
        symbolSize: 30
    });
    if (relationData.identity) {
        // 添加事主身份子结点
        nodes.push({
            name: relationData.identity,
            value: relationData.id,
            category: '事主身份',
            symbolSize: 20
        });
    }
    // 添加附近案件子结点
    var i = 0;
    for (i = 0; i < 5 && i < relationData.nearCaseValues.length; i++) {
        nodes.push({
            name: relationData.nearCaseValues[i] + '(' + relationData.nearCaseIds[i] + ')',
            value: relationData.nearCaseIds[i],
            category: '附近案件',
            symbolSize: 20
        });
    }
    // 添加嫌疑人子结点
    for (i = 0; i < 5 && i < relationData.suspectValues.length; i++) {
        nodes.push({
            name: relationData.suspectValues[i],
            category: '嫌疑人',
            symbolSize: 20
        });
    }
    return nodes;
}


/**
 * [创建关系图的links数组]
 * @param  {JSON对象} relationData [请求返回的relationData(过滤掉前几级key)]
 * @return {对象数组}               [关系图配置项中的links(或edges)]
 */
function createRelationGraphLinks(relationData) {
    var links = [];
    // 连接案件ID中心结点与下一级子结点
    links.push({
        source: '案件' + relationData.id,
        target: '事主身份',
        value: 28
    });
    links.push({
        source: '案件' + relationData.id,
        target: '附近案件',
        value: 30
    });
    links.push({
        source: '案件' + relationData.id,
        target: '嫌疑人',
        value: 30
    });
    // 连接事主身份和下一级子结点
    if (relationData.identity) {
        links.push({
            source: '事主身份',
            target: relationData.identity,
            value: 30
        });
    }
    // 连接附近案件和下一级子结点
    var i = 0;
    for (i = 0; i < 5 && i < relationData.nearCaseValues.length; i++) {
        links.push({
            source: '附近案件',
            target: relationData.nearCaseValues[i] + '(' + relationData.nearCaseIds[i] + ')',
            value: (function() {
                var distance = relationData.suspectDistances[i];
                if (distance >= 0 && distance <= 10) {
                    return distance + 1;
                } else {
                    return distance / 10 + distance % 10 + 10;
                }
            }())
        });
    }
    // 连接嫌疑人和下一级子结点
    for (i = 0; i < 5 && i < relationData.suspectValues.length; i++) {
        links.push({
            source: '嫌疑人',
            target: relationData.suspectValues[i],
            value: (function() {
                var distance = relationData.suspectDistances[i];
                if (distance >= 0 && distance <= 10) {
                    return distance + 1;
                } else {
                    return distance / 10 + distance % 10 + 10;
                }
            }())
        })
    }
    return links;
}


/**
 * [创建关系图配置对象]
 * @param  {JSON对象} relationData [请求返回的relationData(过滤掉前几级key)]
 * @return {option对象}            [关系图配置对象]
 */
function createRelationGraphOption(relationData) {
    var option = {
        color: ['#f57643', '#bda93a', '#61a0a8'],
        legend: [{
            textStyle: {
                color: '#ccc'
            },
            tooltip: {
                show: true
            },
            bottom: 0,
            data: ['事主身份', '附近案件', '嫌疑人']
        }],
        toolbox: {
            show: true,
            feature: {
                dataView: { show: false, readOnly: true },
                restore: { show: true },
                saveAsImage: { show: true }
            }
        },
        series: [{
            id: 'relationshipGraph',
            type: 'graph',
            name: 'relationship',
            layout: 'force',
            force: {
                repulsion: 450,
                edgeLength: [0, 30]
            },
            roam: true,
            draggable: true,
            focusNodeAdjacency: true,
            lineStyle: {
                normal: {
                    color: 'source',
                    curveness: 0,
                    type: "solid"
                }
            },
            label: {
                normal: {
                    show: true,
                    position: 'top',
                }
            },

            // 关系图数据
            categories: [{
                'name': '事主身份'
            }, {
                'name': '附近案件'
            }, {
                'name': '嫌疑人'
            }],
            nodes: createRelationGraphNodes(relationData),
            links: createRelationGraphLinks(relationData),

            tooltip: {}
        }],
        animationDuration: 3000,
        animationEasingUpdate: 'quinticInOut'
    };
    return option;
}


/**
 * ECharts配置相关代码
 */


var dom = $("#container")[0];
var myChart = echarts.init(dom);
var option = null;


/**
 * [初始化series]
 * @return {对象数组} [返回series对象数组]
 */
function initSeries() {
    var mySeries = [

        // 警车位置散点图数据
        {
            id: 'carPosition',
            type: 'scatter',
            coordinateSystem: 'bmap',
            symbol: 'path://M626.688 106.496l-16.384-8.192-24.576 40.96 16.384 8.192L626.688 106.496zM606.208 217.088l45.056-8.192-4.096-16.384-45.056 8.192L606.208 217.088zM524.288 61.44l-16.384 0 0 45.056 16.384 0L524.288 61.44zM933.888 569.344l-36.864 0-45.056-245.76c0-45.056-36.864-81.92-86.016-81.92-4.096 0-4.096 0-4.096 0l0 0 0 0-180.224 0L581.632 192.512l0 0c0 0 0 0 0 0 0-36.864-28.672-65.536-61.44-65.536-36.864 0-61.44 28.672-61.44 65.536 0 0 0 0 0 0l0 0L458.752 245.76 270.336 245.76l0 0 0 0c0 0 0 0-4.096 0C221.184 245.76 180.224 282.624 180.224 327.68l-45.056 245.76L90.112 573.44C40.96 569.344 0 614.4 0 667.648l0 204.8 73.728 0 0 28.672c0 36.864 28.672 61.44 61.44 61.44s61.44-28.672 61.44-61.44l0-28.672 626.688 0 0 28.672c0 36.864 28.672 61.44 61.44 61.44 36.864 0 61.44-28.672 61.44-61.44l0-28.672L1024 872.448l0-204.8C1024 614.4 983.04 569.344 933.888 569.344zM135.168 778.24c-36.864 0-61.44-28.672-61.44-61.44 0-36.864 28.672-61.44 61.44-61.44s61.44 28.672 61.44 61.44C200.704 749.568 172.032 778.24 135.168 778.24zM253.952 569.344l45.056-200.704 425.984 0 45.056 200.704L253.952 569.344zM888.832 778.24c-36.864 0-61.44-28.672-61.44-61.44 0-36.864 28.672-61.44 61.44-61.44 36.864 0 61.44 28.672 61.44 61.44C950.272 749.568 921.6 778.24 888.832 778.24zM430.08 200.704 385.024 192.512 380.928 208.896l45.056 8.192L430.08 200.704zM442.368 139.264l-24.576-36.864L405.504 110.592l24.576 36.864L442.368 139.264z',
            symbolSize: 15,
            data: []
        },

        // 警车路线数据图：路线
        {
            id: 'policeCarLine',
            type: 'lines',
            coordinateSystem: 'bmap',
            polyline: true,
            data: [],
            silent: true,
            lineStyle: {
                normal: {
                    color: '#c23531',
                    color: 'rgb(200, 35, 45)',
                    opacity: 0.2,
                    width: 1
                }
            },
            progressiveThreshold: 500,
            progressive: 200
        },

        // 警车路线数据图：动态
        {
            id: 'policeCarEffect',
            type: 'lines',
            coordinateSystem: 'bmap',
            polyline: true,
            data: [],
            lineStyle: {
                normal: {
                    width: 0
                }
            },
            effect: {
                constantSpeed: 20,
                show: true,
                trailLength: 0.1,
                symbolSize: 1.5
            },
            zlevel: 1
        },

        // 热力图数据
        {
            id: 'freqHeatmap',
            type: 'heatmap',
            coordinateSystem: 'bmap',
            data: []
        }
    ];

    // 添加案情散点图
    convertEventData2Series(eventData, mySeries);

    return mySeries;
}


/**
 * myChart初始化函数
 */
function setMyChartOption() {
    // ECharts配置项
    option = {
        backgroundColor: '#ccc',

        animation: true,

        animationDuration: 1000,

        animationEasing: 'cubicInOut',

        animationDurationUpdate: 1000,

        animationEasingUpdate: 'cubicInOut',

        title: [{
            id: 'statistic',
            right: 120,
            top: 40,
            width: 100,
            textStyle: {
                color: '#fff',
                fontSize: 16
            }
        }],

        toolbox: {
            orient: 'vertical',
            itemSize: 20,
            left: 0,
            top: 0,
            iconStyle: {
                normal: {
                    borderColor: '#fff'
                },
                emphasis: {
                    borderColor: '#b1e4ff'
                }
            },
            feature: {
                // dataZoom: {},
                saveAsImage: {
                    show: true
                }
            }
        },

        brush: {},

        // 百度地图JavaScript API
        bmap: {
            right: '100',
            // center在后面被覆盖
            center: [104.40, 30.67],
            // zoom: 11,
            label: {
                emphasis: {
                    show: false
                }
            },
            // 是否开放鼠标缩放和平移
            roam: true,
            itemStyle: {
                normal: {
                    areaColor: '#323c48',
                    borderColor: '#111'
                },
                emphasis: {
                    areaColor: '#2a333d'
                }
            }
        },

        tooltip: {
            trigger: 'item'
        },

        grid: {
            show: false,
            right: 12,
            top: 50,
            width: '20%'
        },

        xAxis: {
            type: 'value',
            scale: true,
            position: 'top',
            boundaryGap: false,
            splitLine: {
                show: false
            },
            axisLine: {
                show: false
            },
            axisTick: {
                show: false
            },
            axisLabel: {
                margin: 2,
                textStyle: {
                    color: '#aaa'
                }
            },
        },

        yAxis: {
            type: 'category',
            nameGap: 16,
            axisLine: {
                show: false,
                lineStyle: {
                    color: '#ddd'
                }
            },
            axisTick: {
                show: false,
                lineStyle: {
                    color: '#ddd'
                }
            },
            axisLabel: {
                interval: 0,
                textStyle: {
                    fontFamily: "SimSun",
                    color: '#f4e925',
                    fontSize: 12
                }
            },
            data: []
        },

        legend: {
            left: '5%',
            textStyle: {
                color: '#fff',
                fontSize: 14
            },
            data: typeArr
        },

        visualMap: [
            // 热力图的颜色映射工具条
            {
                id: 'visualMapHeat',
                type: 'continuous',
                right: 10,
                bottom: 100,
                show: false,
                seriesIndex: 3,
                min: 0,
                max: 15,
                calculable: true,
                text: ['高', '低'],
                textStyle: {
                    color: '#fff'
                },
                inRange: {
                    color: ['#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
                }
            }
        ],

        series: initSeries()
    }; // end option


    // 初始化图表
    if (option && typeof option === "object") {
        myChart.showLoading();
        // 初始化，notMerge = true
        myChart.setOption(option, true);
        // 设置brush事件相关
        myChart.setOption({
            brush: {
                toolbox: ['rect', 'polygon', 'keep', 'clear'],
                outOfBrush: {
                    color: '#abc'
                },
                brushStyle: {
                    borderWidth: 2,
                    color: 'rgba(0,0,0,0.5)',
                    borderColor: 'rgba(0,0,0,0.9)',
                },
                throttleType: 'debounce',
                throttleDelay: 300,
                geoIndex: 0,
                // 根据series动态设置brush事件的seriesIndex
                // 默认按照案情散点数据series均在series的尾部
                seriesIndex: (function() {
                    var brushSeriesIndex = [];
                    var eventDataLen = Object.keys(eventData).length;
                    var seriesLen = myChart.getOption().series.length;
                    for (var i = seriesLen - eventDataLen; i < seriesLen; i++) {
                        brushSeriesIndex.push(i);
                    }
                    return brushSeriesIndex;
                })()
            }
        });
        myChart.hideLoading();
    }
}

setMyChartOption();


/**
 * 百度地图API相关配置代码
 */


var app = {};

var bmap = null;

var local = null;


/**
 * 设置百度地图配置
 */
var localSearchData = [
    [116.557913, 39.971966, "北京市公安局朝阳分局东坝派出所", "地址：红松园北里8号", "坐标：116.557913,39.971966"],
    [116.478897, 40.014113, "北京市公安局朝阳分局东湖派出所", "地址：北京市朝阳区望京花园130楼", "电话：010-64713294", "坐标：116.478897,40.014113"],
    [116.502669, 39.923031, "北京市公安局朝阳分局八里庄派出所", "地址：十里堡西里218", "电话：(010)65561089 ", "坐标：116.502669,39.923031"],
    [116.598163, 40.065637, "北京首都国际机场公安分局货运区派出所", "地址：首都机场航安路12号", "坐标：116.598163,40.065637"],
    [116.553928, 40.04487, "北京市公安局朝阳分局孙河派出所", "地址：孙河乡康营村康营东路", "电话：(010)64384569", "坐标：116.553928,40.04487"],
    [116.549249, 39.912142, "北京市公安局朝阳分局高碑店派出所", "地址：高碑店乡高碑店村252号 ", "电话：(010)85754153 ", "坐标：116.549249,39.912142"],
    [116.509963, 40.045388, "北京市公安局朝阳分局崔各庄派出所", "地址：北京市朝阳区马泉营西路6号 ", "电话：010-64320110 ", "坐标：116.509963,40.045388"],
    [116.419473, 40.032832, "奥运村街道综治维稳工作中心", "地址：安立路28号院-3-4 ", "坐标：116.419473,40.032832"],
    [116.415922, 39.992993, "朝阳公安分局亚运村派出所安苑里社区派出所", "地址：北京市朝阳区安苑北里9号 ", "坐标：116.415922,39.992993"],
    [116.42947, 39.994561, "北京市公共交通安全保卫分局小营派出所", "地址：北京市朝阳区北四环东路104号", "电话：(010)64918548 ", "坐标：116.42947,39.994561"],
    [116.422375, 39.991588, "奥林匹克公园派出所", "地址：朝阳区小关街道惠新西街9号惠新苑3号楼  ", "坐标：116.422375,39.991588"],
    [116.417056, 39.990522, "北京市公安局公安交通管理局朝阳交通支队亚运村大队", "地址：安苑北里24号", "电话：010-68399551,010-64912336", "坐标：116.417056,39.990522"],
    [116.537125, 39.930849, "北京市公安局朝阳分局平房派出所", "地址：黄杉木店路10号 ", "电话：(010)85574138", "坐标：116.537125,39.930849"],
    [116.493274, 39.929935, "北京市公安局朝阳分局-办证大厅", "地址：道家园1号 ", "坐标：116.493274,39.929935"],
    [116.49338, 39.930028, "北京市公安局朝阳分局", "地址：道家园1号  ", "坐标：116.49338,39.930028"],
    [116.43081, 39.979558, "北京市公安局朝阳分局和平街派出所", "地址：樱花园东街3号  ", "电话：(010)64429007", "坐标：116.43081,39.979558"],
    [116.445592, 39.977861, "北京市公安局朝阳分局太阳宫派出所", "地址：北京市朝阳区西坝河北里39号  ", "电话：010-84253775 ", "坐标：116.445592,39.977861"],
    [116.402851, 39.976657, "北京市公安局朝阳分局安贞里派出所", "地址：安贞西里三区7号楼  ", "电话：(010)64419129 ", "坐标：116.402851,39.976657"],
    [116.578635, 39.876479, "北京市公安局朝阳分局豆各庄派出所", "地址：豆各庄乡豆各庄村518号  ", "坐标：116.578635,39.876479"],
    [116.501749, 39.901518, "北京市公安局公安交通管理局朝阳交通支队", "地址：北京市朝阳区  ", "坐标：116.501749,39.901518"],
    [116.493203, 39.893007, "北京市公安局朝阳分局劲松派出所", "地址：北京市朝阳区大郊亭南街9号院1号楼  ", "电话：010-67727306 ", "坐标：116.493203,39.893007"],
    [116.489789, 39.889805, "南磨房派出所", "地址：平乐园小区105号楼 ", "电话：010-67312979 ", "坐标：116.489789,39.889805"],
    [116.500485, 39.85801, "直属派出所", "地址：北京市朝阳区 ", "坐标：116.500485,39.85801"],
    [116.442219, 39.842178, "最高人民法院人民来访接待室暨申诉立案大厅", "地址：北京市朝阳区小红门乡红寺村40号 ", "坐标：116.442219,39.842178"],
    [116.604184, 40.053442, "北京市公安局朝阳分局首都机场派出所", "地址：首都机场燕翔东里12号  ", "电话：(010)64561626 ", "坐标：116.604184,40.053442"],
    [116.559785, 39.914499, "北京市公安局朝阳分局三间房派出所", "地址：建国路22 ", "电话：(010)65420110 ", "坐标：116.559785,39.914499"],
    [116.586281, 39.930633, "朝阳区公安局预审处", "地址：朝阳北路29号 ", "坐标：116.586281,39.930633"],
    [116.538844, 40.00587, "北京市公安局黑桥地区直属派出所", "地址：北京市朝阳区 ", "电话：(010)52005258 ", "坐标：116.538844,40.00587"],
    [116.471444, 39.992736, "北京市公安局朝阳分局花家地派出所", "地址：花家地北里208 ", "电话：010-84716378,84716376 ,84716377 ", "坐标：116.471444,39.992736"],
    [116.469176, 40.00445, "北京市公安局朝阳分局南湖派出所", "地址：南湖中园238号", "电话：(010)64703003 ", "坐标：116.469176,40.00445"],
    [116.439878, 40.002606, "北京市公安局公共交通安全保卫分局大屯站派出所", "地址：鼎成西路附近 ", "电话：(010)84618802 ", "坐标：116.439878,40.002606"],
    [116.413156, 39.99109, "亚运村治安派出所", "地址：安定路1号 ", "电话：(010)64910162 ", "坐标：116.413156,39.99109"],
    [116.427252, 40.007958, "北京市公安局朝阳分局大屯派出所", "地址：北京市朝阳区大屯220号院6 ", "电话：(010)64949248 ", "坐标：116.427252,40.007958"],
    [116.394556, 39.992979, "中华民族园治安办公室", "地址：民族园路1  ", "坐标：116.394556,39.992979"],
    [116.502916, 39.970225, "北京市公安局朝阳分局酒仙桥派出所", "地址：酒仙桥南路9号", "电话：(010)64371415 ", "坐标：116.502916,39.970225"],
    [116.509569, 39.985258, "北京市公安局朝阳分局将台派出所", "地址：北京市朝阳区驼房营路 ", "电话：(010)64362030 ", "坐标：116.509569,39.985258"],
    [116.536109, 39.912854, "北京市公安局高碑店派出所", "地址：北京市朝阳区 ", "坐标：116.536109,39.912854"],
    [116.511534, 39.934866, "北京市公安局朝阳分局六里屯派出所", "地址：十里堡1号院 ", "电话：(010)85817657 ", "坐标：116.511534,39.934866"],
    [116.490795, 39.908691, "北京东站公安派出所", "地址：百子湾路7号附近 ", "坐标：116.490795,39.908691"],
    [116.493945, 39.929821, "北京市公安局朝阳分局治安支队", "地址：道家园1号 ", "坐标：116.493945,39.929821"],
    [116.492484, 39.906736, "北京铁路公安局北京公安处北京东车站派出所", "地址：三间房百子湾路 ", "坐标：116.492484,39.906736"],
    [116.473413, 39.934036, "北京市公安局朝阳分局团结湖派出所", "地址：团结湖路19 ", "电话：(010)85989395 ", "坐标：116.473413,39.934036"],
    [116.437682, 39.981357, "北京市朝阳分局和平街派出所辅警中队", "地址：北京市朝阳区 ", "坐标：116.437682,39.981357"],
    [116.445125, 39.975757, "朝阳公安分局巡警支队", "地址：西坝河北里8号 ", "坐标：116.445125,39.975757"],
    [116.387041, 39.989606, "祁家豁子长途客运派出所", "地址：华严北里甲30号 ", "坐标：116.387041,39.989606"],
    [116.450712, 39.936879, "朝阳公安分局工人体育场派出所", "地址：北京工人体育场西门内  ", "电话：(010)65022662 ", "坐标：116.450712,39.936879"],
    [116.538462, 39.881179, "北京市公安局朝阳分局王四营派出所", "地址：王四营3号  ", "电话：010-67364358", "坐标：116.538462,39.881179"],
    [116.51848, 39.873961, "北京市公安局朝阳分局垡头派出所", "地址：垡头北里12号楼 ", "电话：(010)67381152 ", "坐标：116.51848,39.873961"],
    [116.489963, 39.859169, "北京市公安局十八里店派出所", "地址：北京市朝阳区 ", "坐标：116.489963,39.859169"],
    [116.462805, 39.898394, "北京市公安局朝阳分局双井派出所", "地址：垂杨柳中街2号 ", "电话：(010)67716244,010-67716495,010-87771010 ", "坐标：116.462805,39.898394"],
    [116.461534, 39.880294, "北京市公安局朝阳分局潘家园派出所", "地址：潘家园路甲1号 ", "电话：(010)67785877 ", "坐标：116.461534,39.880294"],
    [116.533664, 39.844256, "北京市公安局朝阳分局小武基派出所", "地址：北京市朝阳区王村路 ", "电话：010-87335298,010-87335927", "坐标：116.533664,39.844256"],
    [116.575971, 40.009939, "北京市公安局朝阳分局金盏派出所", "地址：金盏乡金盏大街 ", "电话：(010)84333271 ", "坐标：116.575971,40.009939"],
    [116.462805, 39.898394, "楼梓庄派出所", "地址：楼梓庄乡楼梓庄村", "电话：(010)67716244,010-67716495,010-87771010 ", "坐标：116.462805,39.898394"],
    [116.603106, 39.915457, "杨闸派出所", "地址：京通快速路附近", "坐标：116.603106,39.915457"],
    [116.503843, 40.063756, "北京市公安局朝阳分局黄港派出所", "地址：北京市朝阳区上辛堡458号", "电话：(010)84791728", "坐标：116.503843,40.063756"],
    [116.520492, 40.00629, "北京市公安局朝阳分局南皋派出所", "地址：南皋村路口东南100米", "电话：(010)84566383", "坐标：116.520492,40.00629"],
    [116.520634, 39.997101, "北京公安处环行铁道派出所", "地址：北京市朝阳区庄园西路西200米", "电话：010-51896911", "坐标：116.520634,39.997101"],
    [116.452812, 40.034717, "北京市公安局朝阳分局来广营派出所", "地址：北京市朝阳区来广营朝来农艺园", "电话：(010)84912670", "坐标：116.452812,40.034717"],
    [116.417946, 40.004973, "公安派出所", "地址：北京市朝阳区", "坐标：116.417946,40.004973"],
    [116.416678, 39.99373, "北京市公安局朝阳分局亚运村派出所", "地址：安苑北里甲8", "电话：(010)64912192", "坐标：116.416678,39.99373"],
    [116.419876, 40.029954, "北京市公安局朝阳分局奥运村派出所", "地址：拂林路甲9", "电话：(010)84917506", "坐标：116.419876,40.029954"],
    [116.506624, 39.953253, "北京市公安局东风派出所", "地址：北京市小辛庄甲12号", "电话：(010)85849101", "坐标：116.506624,39.953253"],
    [116.457958, 39.955093, "北京市公安局朝阳分局新源里派出所", "地址：新源里17号", "电话：(010)64674086", "坐标：116.457958,39.955093"],
    [116.443423, 39.967066, "北京市公安局朝阳分局香河园派出所", "地址：西坝河南里26号楼", "电话：(010)64660050", "坐标：116.443423,39.967066"],
    [116.41907, 39.98371, "北京市公安局朝阳分局小关派出所", "地址：小关东街5号节能中心旁边", "电话：(010)64917134", "坐标：116.41907,39.98371"],
    [116.444968, 39.924374, "北京市公安局朝阳分局朝外大街派出所", "地址：朝阳门外三丰里甲11号", "电话：(010)85612407", "坐标：116.444968,39.924374"],
    [116.604224, 39.859452, "北京市公安局朝阳分局黑庄户派出所", "地址：北京市朝阳区黑庄户路", "电话：(010)85382586", "坐标：116.604224,39.859452"],
    [116.52391, 39.871438, "王四营派出所", "地址：北京市朝阳区陶庄路120号", "坐标：116.52391,39.871438"],
    [116.500535, 39.858058, "北京市公安局老君堂地区直属派出所", "地址：朝阳区小武基村双馨实验学校北侧", "坐标：116.500535,39.858058"],
    [116.464151, 39.847314, "北京市公安局朝阳分局小红门派出所", "地址：朝阳区小红门四环内小红门路龙爪树南里142号院5号楼军休办", "电话：(010)87690144 ", "坐标：116.464151,39.847314"],
    [116.461985, 39.918461, "北京市公安局朝阳分局建国门外派出所", "地址：东三环光华路光华里甲2号", "电话：010-65084102,65025557", "坐标：116.461985,39.918461"],
    [116.579019, 39.906338, "北京市公安局朝阳分局双桥车站派出所", "地址：北京市朝阳区", "电话：(010)65761772", "坐标：116.579019,39.906338"],
    [116.610529, 39.908067, "北京市公安局朝阳分局管庄派出所", "地址：双会桥西甲5号", "电话：(010)65761888", "坐标：116.610529,39.908067"],
    [116.460125, 39.941686, "北京市公安局朝阳分局三里屯派出所", "地址：三里屯南41号 ", "电话：(010)64166786 ", "坐标：116.460125,39.941686"],
    [116.47974, 39.953064, "北京市公安局朝阳分局麦子店派出所", "地址：枣营北里1号", "电话：(010)65063295", "坐标：116.47974,39.953064"]
];
var opts = {
    width: 250, // 信息窗口宽度
    height: 120, // 信息窗口高度
    enableAutoPan: false,
    enableMessage: true //设置允许信息窗发送短息
};

function setBmapOption() {
    if (!app.inNode) {
        // 添加百度地图插件
        bmap = myChart.getModel().getComponent('bmap').getBMap();

        // 地图/卫星/三维控制条
        // bmap.addControl(new BMap.MapTypeControl({
        //     anchor: BMAP_ANCHOR_TOP_LEFT
        // }));

        // bmap.setMapStyle({
        //     style: 'midnight'
        // });

        local = new BMap.LocalSearch(bmap, {
            renderOptions: {
                map: bmap
            }
        })

        // 成都坐标初始化
        // bmap.centerAndZoom(new BMap.Point(104.20, 30.67), 13);
        // 北京坐标初始化
        bmap.centerAndZoom(new BMap.Point(116.46, 39.92), 14);

        // 中心点位置与当前选择相匹配
        // var $currentStation = $('#choice').text();
        // $('#police-station-menu ul ul li').each(function() {
        //     if ($(this).text() === $currentStation) {
        //         $(this).click();
        //     }
        // });


        // 限制百度地图的缩放级别
        bmap.setMinZoom(12);

        // 限制百度地图的拖拽区域
        var limitedArea = new BMap.Bounds(new BMap.Point(116.314294, 39.787754), new BMap.Point(116.690864, 40.138585));
        BMapLib.AreaRestriction.setBounds(bmap, limitedArea);


        for (var i = 0; i < localSearchData.length; i++) {
            var marker = new BMap.Marker(new BMap.Point(localSearchData[i][0], localSearchData[i][1])); // 创建标注
            if (localSearchData[i].length == 6) {
                var content = '<h5 style="color: #CC5522;font-size: 14px;font-weight: bold;">' + localSearchData[i][2] + '</h5><h6>' + localSearchData[i][3] + '</h6><h6>' + localSearchData[i][4] + '</h6><h6>' + localSearchData[i][5] + '</h6>';
            } else content = '<h5 style="color: #CC5522;font-size: 14px;font-weight: bold;">' + localSearchData[i][2] + '</h5><h6>' + localSearchData[i][3] + '</h6><h6>' + localSearchData[i][4] + '</h6>';
            bmap.addOverlay(marker); // 将标注添加到地图中
            addClickHandler(content, marker);
            marker.addEventListener("click", function() {
                $('#side-chart .panel-title').text('信息');
                $('#side-chart #side-chart-container').empty();
                $('#side-chart').css('display', 'block');
                $('#side-list').css("display", "none");
                $('#side-detail').css('display', 'none');
                // 侧边栏展开
                if ($('#side-panel').width() === 0) {
                    $('#side-panel').animate({
                        width: '40%'
                    }, 500, function() {
                        // Animation complete.
                    });
                }
            });
        }

        function addClickHandler(content, marker) {
            marker.addEventListener("click", function(e) {
                openInfo(content, e)
            });
        }

        function openInfo(content, e) {
            var p = e.target;
            var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);
            var infoWindow = new BMap.InfoWindow(content, opts); // 创建信息窗口对象 
            bmap.openInfoWindow(infoWindow, point); //开启信息窗口
        }


    }
}

setBmapOption();


// 改变地图中心点位置
$('#police-station-menu ul ul li').click(function() {
    var choice = $(this).text();
    switch (choice) {
        case '麦子店派出所':
            $('#choice').text('麦子店派出所');
            var point = new BMap.Point(116.47974, 39.953064);
            bmap.centerAndZoom(point, 16);
            var $b = $('#choice');
            $('<b>').addClass('caret').appendTo($b);
            var content = '<h5 style="color: #CC5522;font-size: 14px;font-weight: bold;">' + localSearchData[localSearchData.length - 1][2] + '</h5><h6>' + localSearchData[localSearchData.length - 1][3] + '</h6><h6>' + localSearchData[localSearchData.length - 1][4] + '</h6><h6>' + localSearchData[localSearchData.length - 1][5] + '</h6>';
            var infoWindow = new BMap.InfoWindow(content, opts);
            bmap.openInfoWindow(infoWindow, point); //打开信息窗口
            break;
        case '三里屯派出所':
            $('#choice').text('三里屯派出所');
            var point1 = new BMap.Point(116.460125, 39.941686);
            bmap.centerAndZoom(point1, 16);
            var $b = $('#choice');
            $('<b>').addClass('caret').appendTo($b);
            var content = '<h5 style="color: #CC5522;font-size: 14px;font-weight: bold;">' + localSearchData[localSearchData.length - 2][2] + '</h5><h6>' + localSearchData[localSearchData.length - 2][3] + '</h6><h6>' + localSearchData[localSearchData.length - 2][4] + '</h6><h6>' + localSearchData[localSearchData.length - 2][5] + '</h6>';
            var infoWindow = new BMap.InfoWindow(content, opts);
            bmap.openInfoWindow(infoWindow, point1); //打开信息窗口
            break;
        default:
            $('#choice').text('默认');
            bmap.centerAndZoom(new BMap.Point(116.46, 39.92), 14);
            var $b = $('#choice');
            $('<b>').addClass('caret').appendTo($b);
            bmap.closeInfoWindow(infoWindow, point1);
            break;
    }
});


/**
 * 事件处理相关代码
 */


/**
 * 侧边栏相关变量声明
 */
// 侧边栏图表
var sideChart = null;
// 侧边栏图表配置
var sideOption = null;
// 侧边栏信息模块
var $info = $('#side-list .panel-body');


function ctlboradInit() {
    // 热力图 - 根据数据生成select-option
    $('#hotmap-select').text('');
    $('#hotmap-select').append('<option>关闭</option>');
    $('#hotmap-select').append('<option>全部</option>');
    var category = "";
    for (var i = 0; i < typeArr.length; i++) {
        category = typeArr[i];
        $('#hotmap-select').append('<option>' + category + '</option>');
    }

    //初始化起始时间和终止时间
    $('#startTime').attr('value', startTime);
    $('#endTime').attr('value', endTime);
}
// 页面加载
$(function() {
    ctlboradInit();
    // 语音助手图层选项
    var assistantLayer = $('#layer').val();
    if (assistantLayer === 'heatmap') {
        $('#hotmap-select').val('全部').change();
    }
});


// 加载案情和清除案情按钮事件
$('#btn-eventctl').click(function(event) {

    // .btn-load为数据加载状态
    if ($(this).hasClass('btn-load')) {

        // 修改按钮图形
        $(this)[0].src = '/iinspection/img/event_load.png';
        // 修改按钮状态
        $(this).addClass('btn-clear').removeClass('btn-load');

        myChart.showLoading();
        // 直接对eventData数据按照初始化生成的id进行加载
        var i = 0;
        for (var each in eventData) {
            myChart.setOption({
                series: {
                    id: 'eventDataCategory' + i,
                    data: eventData[each]
                }
            });
            i++;
        }
        // 加载legend
        myChart.setOption({
            legend: {
                data: typeArr
            }
        });
        myChart.hideLoading();

    } else {

        // 修改按钮图形
        $(this)[0].src = '/iinspection/img/event_clear.png';
        // 修改按钮状态
        $(this).addClass('btn-load').removeClass('btn-clear');

        myChart.showLoading();
        // 清除数据
        var tmpSeries = myChart.getOption().series;
        for (var i = 0; i < typeArr.length; i++) {
            var tmp = tmpSeries.pop();
            if (tmp.type === 'scatter' && tmp.id !== 'carPosition') {
                myChart.setOption({
                    series: {
                        id: tmp.id,
                        data: []
                    }
                });
            }
        }
        // 清除legend
        myChart.setOption({
            legend: {
                data: []
            }
        });
        myChart.hideLoading();
    }
});


// 加载位置与清除位置按钮事件
$('#btn-positionctl').click(function(event) {

    // .btn-load为数据加载状态
    if ($(this).hasClass('/iinspection/btn-load')) {

        // 修改按钮图形
        $(this)[0].src = 'img/position_load.png';
        // 修改按钮状态
        $(this).addClass('btn-clear').removeClass('btn-load');

        // 异步请求
        $.ajax({
            type: "get",
            cache: true,
            async: true,
            url: "./pc",
            success: function(res) {
                policeCarData = $.parseJSON(res);
                // 加载数据
                myChart.showLoading();
                myChart.setOption({
                    series: [{
                        id: 'carPosition',
                        data: convertPoliceCarJsonData(policeCarData)
                    }]
                });
                myChart.hideLoading();
            }
        });
    } else {
        // 修改按钮图形
        $(this)[0].src = '/iinspection/img/position_clear.png';
        // 修改按钮状态
        $(this).addClass('btn-load').removeClass('btn-clear');
        // 清除数据
        myChart.showLoading();
        myChart.setOption({
            series: [{
                id: 'carPosition',
                data: []
            }]
        });
        myChart.hideLoading();
    }
});


// 加载路线和清除路线按钮事件
$('#btn-linectl').click(function(event) {

    // .btn-load为数据加载状态
    if ($(this).hasClass('btn-load')) {
        // 修改按钮图形
        $(this)[0].src = '/iinspection/img/line_load.png';
        // 修改按钮状态
        $(this).addClass('btn-clear').removeClass('btn-load');
        // 加载数据
        myChart.showLoading();
        myChart.setOption({
            series: [{
                id: 'policeCarLine',
                // 暂时去除线路效果
                data: linesData
            }, {
                id: 'policeCarEffect',
                data: linesData
            }]
        });
        myChart.hideLoading();
    } else {
        // 修改按钮图形
        $(this)[0].src = '/iinspection/img/line_clear.png';
        // 修改按钮状态
        $(this).addClass('btn-load').removeClass('btn-clear');
        // 更新数据
        myChart.showLoading();
        myChart.setOption({
            series: [{
                id: 'policeCarLine',
                data: []
            }, {
                id: 'policeCarEffect',
                data: []
            }]
        });
        myChart.hideLoading();
    }
});


// select表单改变事件：改变热力图类型
$('#hotmap-select').change(function() {
    // 获取类别
    var category = $('#hotmap-select option:selected').text();
    // 判断类别和查找
    if (category === '关闭') {
        myChart.showLoading();
        myChart.setOption({
            series: {
                id: 'freqHeatmap',
                data: []
            },

            visualMap: {
                id: 'visualMapHeat',
                show: false
            }
        });
        myChart.hideLoading();
    } else if (category === '全部') {
        myChart.showLoading();
        var allHeatMapData = [];
        for (var eachCate in eventData) {
            allHeatMapData = allHeatMapData.concat(convertFreqData(eventData[eachCate]));
        }
        myChart.setOption({
            series: {
                id: 'freqHeatmap',
                data: allHeatMapData
            },

            visualMap: {
                id: 'visualMapHeat',
                show: false
            }
        });
        myChart.hideLoading();
    } else {
        myChart.showLoading();
        myChart.setOption({
            series: {
                id: 'freqHeatmap',
                data: convertFreqData(eventData[category])
            },

            visualMap: {
                id: 'visualMapHeat',
                show: false
            }
        });
        myChart.hideLoading();
    }
});


// brush事件: 每选中一个散点就会触发一次
myChart.on('brush', function(params) {
    // 禁用百度地图拖拽(此处的禁用很重要)
    bmap.disableDragging();
});


// brushselected事件: 点击选框工具触发一次，选区结束触发一次
myChart.on('brushselected', function(params) {
    // 禁用百度地图拖拽
    bmap.disableDragging();

    // 此处条件判断避免了点击选框工具和取消选框工具时会触发侧边栏弹出
    if (params.batch[0].areas.length) {

        var mainSeries = params.batch[0].selected;
        var selectedItems = [];

        // 添加选中的案情信息
        for (var index = 0; index < mainSeries.length; index++) {
            var seriesName = mainSeries[index].seriesName;
            for (var i = 0; i < mainSeries[index].dataIndex.length; i++) {
                var rawIndex = mainSeries[index].dataIndex[i];
                var dataItem = eventData[seriesName][rawIndex];
                selectedItems.push(dataItem);
            }
        }

        // 按案情时间排序
        selectedItems.sort(function(a, b) {
            return Date.parse(caseTime[a.value[2]]) - Date.parse(caseTime[b.value[2]]);
        });

        // 更改侧边栏标题
        $('#side-chart .panel-title').text('案情统计图');
        $('#side-list .panel-title').text('案情信息列表');

        $('#side-chart').css('display', 'block');
        $('#side-list').css('display', 'block');
        $('#side-detail').css('display', 'none');

        // 展开侧边栏
        if ($('#side-panel').width() === 0) {
            $('#side-panel').animate({
                width: '40%'
            }, 500, function() {
                // Animation complete.
            });
        }

        /**
         *  框选数据的统计转换
         */
        // 横轴按时间统计(时间已经按从小到大排序)
        var xAxisData = [];
        // 类别legend
        var legendData = [];
        for (var i = 0; i < selectedItems.length; i++) {
            var tmpTime = caseTime[selectedItems[i].value[2]].split(' ')[0];
            var tmpType = subcaseType[selectedItems[i].value[2]];
            if (xAxisData.indexOf(tmpTime) === -1) {
                xAxisData.push(tmpTime);
            }
            if (legendData.indexOf(tmpType) === -1) {
                legendData.push(tmpType);
            }

        }

        // series数据声明
        var statisticBarData = {};
        var statisticPieData = {};
        var cvtPieData = [];
        // series数据结构初始化
        for (var i = 0; i < legendData.length; i++) {
            var barDataTemp = [];
            for (var j = 0; j < xAxisData.length; j++) {
                barDataTemp.push(0);
            }
            statisticBarData[legendData[i]] = barDataTemp;
            statisticPieData[legendData[i]] = 0;
        }

        // 统计数据
        for (var eachCase = 0; eachCase < selectedItems.length; eachCase++) {
            // 当前案件的id
            var curCaseId = selectedItems[eachCase].value[2];
            // 当前案件的类型
            var curCaseType = subcaseType[curCaseId];
            // 当前案件的时间
            var curCaseTime = caseTime[curCaseId].split(' ')[0];
            // 当前案件时间对应xAxis上的索引位置
            var timeIndex = xAxisData.indexOf(curCaseTime);
            // 柱状图统计
            statisticBarData[curCaseType][timeIndex]++;
            // 饼图统计
            statisticPieData[curCaseType]++;
        }

        // 饼图数据转换：key-value -> name, value
        for (var eachPieData in statisticPieData) {
            var cvtPieDataTemp = {};
            cvtPieDataTemp.name = eachPieData;
            cvtPieDataTemp.value = statisticPieData[eachPieData];
            cvtPieData.push(cvtPieDataTemp);
        }

        // 柱状图数据向series转换
        var sideChartSeries = [];
        for (var eachBarData in statisticBarData) {
            seriesTemp = {
                name: eachBarData,
                type: 'bar',
                stack: 'total',
                data: statisticBarData[eachBarData]
            }
            sideChartSeries.push(seriesTemp);
        }

        // 添加饼图series
        sideChartSeries.push({
            name: '数量占比',
            type: 'pie',
            center: ['80%', '50%'],
            radius: '18%',
            data: cvtPieData
        });

        // 添加图表
        sideChart = echarts.init($('#side-chart-container')[0]);
        sideOption = {
            tooltip: {
                trigger: 'axis',
                axisPointer: { // 坐标轴指示器，坐标轴触发有效
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                textStyle: {
                    color: '#ccc'
                },
                data: legendData
            },
            grid: {
                left: '3%',
                right: '40%',
                bottom: '3%',
                containLabel: true
            },
            xAxis: [{
                type: 'category',
                data: xAxisData
            }],
            yAxis: [{
                type: 'value'
            }],
            axisLabel: {
                textStyle: {
                    color: '#ccc'
                }
            },
            series: sideChartSeries
        };
        sideChart.showLoading();
        sideChart.setOption(sideOption);
        sideChart.hideLoading();

        // 添加事件列表
        // 清空原来的内容
        $info.empty();
        // 创建事件列表组: bootstrap - panel-group
        var $panelGrp = $('<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true"></div>');
        for (var i = 0; i < selectedItems.length; i++) {
            // 按时间顺序插入
            // 其中case-id为自定义标签，存储案情id，点击跳转更改数据用
            $panelGrp.prepend(
                '<div class="panel panel-default">' +
                '<div class="panel-heading" role="tab" id="heading' + i + '" data-toggle="collapse" data-parent="#accordion" href="#collapse' + i + '" aria-expanded="false" aria-controls="collapse' + i + '" case-id="' + selectedItems[i].value[2] + '">' +
                '<h4 class="panel-title">' +
                caseTime[selectedItems[i].value[2]] + '：&nbsp;' + selectedItems[i].name +
                '</h4>' +
                '</div>' +
                '<div id="collapse' + i + '" class="panel-body panel-collapse collapse" role="tabpanel" aria-labelledby="heading' + i + '">' +
                caseAbstract[selectedItems[i].value[2]] +
                '</div>' +
                '</div>'
            );
        }
        $panelGrp.appendTo($info);


        // 侧边栏选框的事件列表相关事件
        $('#side-list .panel-group .panel-heading')
            // 侧边栏事件列表点击单个案件时跳转到事件详情
            .click(function(event) {
                var caseId = $(this).attr('case-id');
                clickCase(caseId);
            })
            // 侧边栏事件列表鼠标进入时展开简介
            .mouseenter(function() {
                $(this).siblings('.collapse').collapse('show');
            })
            // 侧边栏事件列表鼠标离开时收回简介
            .parent('.panel')
            .mouseleave(function() {
                $(this).children('.collapse').collapse('hide');
            });
    }
});


// 视觉映射组件事件：阻止地图拖拽
myChart.on('datarangeselected', function() {
    // 禁用百度地图拖拽
    bmap.disableDragging();
});


/**
 * [点击单个案件后对侧边栏布局的函数]
 * @param  {String} caseId     [事件id]
 */
function clickCase(caseId) {
    // 更改标题
    $('#side-chart .panel-title').text('关系图');
    $('#side-list .panel-title').text('案件信息');

    $('#side-chart').css('display', 'block');
    $('#side-list').css('display', 'block');
    $('#side-detail').css('display', 'block');

    // 侧边栏展开
    if ($('#side-panel').width() === 0) {
        $('#side-panel').animate({
            width: '40%'
        }, 500, function() {
            // Animation complete.
        });
    }

    // 添加案情信息
    $info.empty();
    var $ulInfo = $('<ul>');
    $('<li>').addClass('time').text('作案时间：' + caseTime[caseId]).appendTo($ulInfo);
    $('<li>').addClass('person').text('事主身份：' + identity[caseId]).appendTo($ulInfo);
    $('<li>').addClass('brief').text('案件摘要：' + caseAbstract[caseId]).appendTo($ulInfo);
    $('<li>').addClass('way').text('作案手段：' + subcaseType[caseId]).appendTo($ulInfo);
    $('<li>').addClass('station').text('处警单位派出所：' + localSubstation[caseId]).appendTo($ulInfo);
    $ulInfo.appendTo($info);

    // 展示案件详情
    $('#side-detail .panel-body').empty().append(feedback[caseId]);


    // ajax请求关系图数据
    $.ajax({
        type: "POST",
        url: "/iinspection/map/loadCaseRelationShip",
        data: JSON.stringify({
            params: {
                id: caseId
            }
        }),
        async: false,
        dataType: 'json',
        contentType: 'application/json',
        success: function(data) {
            relationData = data.detail.crimeRelationships;
        }
    });

    // 添加图表信息
    sideChart = echarts.init($('#side-chart-container')[0]);
    if (relationData.id) {
        sideOption = createRelationGraphOption(relationData);
        sideChart.setOption(sideOption);
    } else {
        sideChart.showLoading({
            text: '暂无信息',
            color: '#c23531',
            textColor: '#fff',
            maskColor: 'rgba(37, 40, 48, 0)',
            zlevel: 0
        });
    }
}

// 点击单个案情事件触发侧边栏展开
myChart.on('click', function(event) {
    var caseId = event.data.value[2];
    clickCase(caseId);
});


/**
 * 地图容器上的点击事件
 * 1.恢复百度地图拖拽
 * 2.如果侧边栏展开，则点击收回(已注释)
 */
$('#container').click(function(event) {
    // 恢复百度地图拖拽
    bmap.enableDragging();

    // 如果侧边栏展开，则点击收回
    // if ($('#side-panel').width() !== 0) {
    //     $('#side-panel').animate({
    //         width: '0%'
    //     }, 500, function() {
    //         // Animation complete.
    //     });
    // }

});


/**
 * 侧边栏关闭按钮
 */
$('.iconfont').click(function() {
    $('#side-panel').animate({
        width: '0%'
    }, 500, function() {
        // Animation complete.
    });
});


/**
 * 数据与时间和搜索关键词的联动
 */


/**
 * 去掉字符串首尾的空格
 * @param  {String} str [输入的字符串，主要用于对搜索框的查询词处理]
 * @return {String}     [返回去掉首尾空格的查询词]
 */
function trim(str) {
    return str.replace(/(^\s*)|(\s*$)/g, "");
}


/**
 * [刷新地图]
 * @param  {String} startTime [开始时间]
 * @param  {String} endTime   [结束时间]
 * @param  {String} keyword   [关键词]
 */
function refreshMap(startTime, endTime, keyword) {
    // 获取刷新前的中心位置和缩放级别
    var center = bmap.getCenter();
    var zoom = bmap.getZoom();
    // 去除关键词前后空格
    keyword = trim(keyword);
    // 请求ESData
    getESData(startTime, endTime, keyword);
    // ESData转换
    eventData = cvtESData2eventData(ESData);
    // 加载echarts配置
    setMyChartOption();
    // 加载百度地图配置
    setBmapOption();
    // 初始化控制面板
    ctlboradInit();
    // 恢复刷新前的中心位置和缩放级别
    bmap.centerAndZoom(new BMap.Point(center.lng, center.lat), zoom);

}


// 起始时间配置和联动触发
$('#startTime')
    .datetimepicker({
        format: 'yyyy-mm-dd hh:00',
        weekStart: 1,
        startView: 'month',
        minView: 'day',
        todayBtn: true,
        todayHighlight: true,
        language: 'zh-CN',
        minuteStep: 1,
        pickerPosition: 'bottom-right',
        autoclose: true
    })
    .on('click', function() {
        $('#startTime').datetimepicker('setEndDate', $('#endTime').val());
    })
    .on('changeDate', function() {
        // 获取开始时间
        startTime = $(this).val();
        // 获取结束时间
        endTime = $('#endTime').val();
        // 获取关键词
        var keyword = $('#search-input').val();
        // 刷新地图
        refreshMap(startTime, endTime, keyword);
    });

// 点击图标触发起始时间
$('#startTime + span i').on('click', function() {
    $('#startTime').focus().click();
});

// 终止时间配置和联动触发
$('#endTime')
    .datetimepicker({
        format: 'yyyy-mm-dd hh:00',
        weekStart: 1,
        startView: 'month',
        minView: 'day',
        todayBtn: true,
        todayHighlight: true,
        language: 'zh-CN',
        minuteStep: 1,
        pickerPosition: 'bottom-right',
        autoclose: true
    })
    .on('click', function() {
        $('#endTime').datetimepicker('setStartDate', $('#startTime').val());
    })
    .on('changeDate', function() {
        // 获取开始时间
        startTime = $('#startTime').val();
        // 获取结束时间
        endTime = $(this).val();
        // 获取关键词
        var keyword = $('#search-input').val();
        // 刷新地图
        refreshMap(startTime, endTime, keyword);
    });

// 点击图标触发终止时间
$('#endTime + span i').on('click', function() {
    $('#endTime').focus().click();
});


// 搜索页面的表单提交
$('#search-btn').click(function(event) {
    // 获取关键词
    var keyword = $('#search-input').val();
    // 刷新地图
    refreshMap(startTime, endTime, keyword);
});


// 回车提交搜索请求
$('#search-input').keydown(function(event) {
    if (event.keyCode === 13) {
        $('#search-btn').click();
    }
});


// 散点hover的tip重构
myChart.on('mouseover', function(event) {
    var curId = event.data.value[2];
    $('#map-scatter-tip').text(caseAbstract[curId]).css('display', 'block');

});

myChart.on('mouseout', function(event) {
    $('#map-scatter-tip').css('display', 'none');
});

var $scatterTip = $('#map-scatter-tip');
$('#container').mousemove(function(event) {
    if ($scatterTip.css('display') !== 'none') {
        $scatterTip.css('left', event.pageX + 'px');
        $scatterTip.css('top', event.pageY + 'px');
    }
});
